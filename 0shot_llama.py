# -*- coding: utf-8 -*-
"""AP1-0SHOT-LLAMA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1b97FlT-mNN5VV1mMGUjnztubI7Ql9ZRc
"""

# Commented out IPython magic to ensure Python compatibility.
!pip install colab-xterm
# %load_ext colabxterm

!pip install colab-xterm -qqq
!pip install langchain -qqq
!pip install langchain_community -qqq

"""Run -

curl -fsSL https://ollama.com/install.sh | sh

ollama serve & ollama pull llama3.1:8b-instruct-q4_K_M
"""

# Commented out IPython magic to ensure Python compatibility.
# %xterm

"""Testing llama model locally"""

from langchain_community.llms import Ollama

llm = Ollama(model="llama3.1:8b-instruct-q4_K_M")

response = llm.invoke("What is the capital of New York state?")
print(response)

"""0 shot inference on YT data"""

import pandas as pd
from tqdm import tqdm
import requests
import json
import time

def get_llama_response(prompt, max_retries=3, retry_delay=1):
    url = "http://localhost:11434/api/generate"

    data = {
        "model": "llama3.1:8b-instruct-q4_K_M",
        "prompt": prompt,
        "stream": False,
        "temperature": 0.2,
    }

    for attempt in range(max_retries):
        try:
            response = requests.post(url, json=data)
            response.raise_for_status()
            return response.json()['response']
        except Exception as e:
            if attempt == max_retries - 1:
                print(f"Error after {max_retries} attempts: {e}")
                return None
            time.sleep(retry_delay)

def classify_comment(row):
    prompt = f"""There are four pieces of information provided:
Consider this title of a YouTube video: {row['Title']}.
The title is from a video on this topic: {row['Topic']}.
This comment left by a user on the abovementioned video: "{row['Comments']}"
Whataboutism is the practice of deflecting criticism or avoiding an unfavorable issue by raising a different, more favorable matter, or by making a counter accusation.
Identify whether the above comment exhibits whataboutism. Respond with only one of the two options: "whataboutism" or "not whataboutism".
"""

    response = get_llama_response(prompt)
    if response is None:
        return "not whataboutism"
    response = response.lower()
    if "not" not in response:
        return "whataboutism"
    else:
        return "not whataboutism"

data_path = "/content/drive/MyDrive/ap_data/"
df = pd.read_csv(data_path + "annotations_1645.csv")

def process_dataframe(df, batch_size=10):
    tqdm.pandas(desc="Processing YT comments")
    df['output'] = df.progress_apply(classify_comment, axis=1)
    return df
df = process_dataframe(df)

df.to_csv(data_path+"output_yt_0shot-llama3-4bit.csv", index=False)

def map_output(output):
    if 'not' in output:
        return 0
    else:
        return 1
true_labels = list(df['Label'])
predicted_labels = list(df['output'].apply(map_output))

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

accuracy = accuracy_score(true_labels, predicted_labels)
precision = precision_score(true_labels, predicted_labels)
recall = recall_score(true_labels, predicted_labels)
f1 = f1_score(true_labels, predicted_labels)

print(f"Accuracy: {accuracy:.4f}")
print(f"Precision: {precision:.4f}")
print(f"Recall: {recall:.4f}")
print(f"F1 Score: {f1:.4f}")

"""Twitter Data"""

t_df = pd.read_csv(data_path+"twitter_data_1204.csv")

t_df.head()

def classify_comment_tw(row):
    prompt = f"""
    There are four pieces of information provided:
    Consider this tweet: "{row['Title']}".
    The tweet is on this topic: {row['Topic']}.
    This reply tweet left by a user on the abovementioned tweet: "{row['Comments']}"
    Whataboutism is the practice of deflecting criticism or avoiding an unfavorable issue by raising a different, more favorable matter, or by making a counter accusation.
    Identify whether the above reply tweet exhibits whataboutism in the given context. Respond with only one of the two options: "whataboutism" or "not whataboutism".
    """

    response = get_llama_response(prompt)

    if response is None:
        return "not whataboutism"
    response = response.lower()
    if "not" not in response:
        return "whataboutism"
    else:
        return "not whataboutism"

def process_dataframe_tw(t_df, batch_size=10):
    tqdm.pandas(desc="Processing Twitter tweets")
    t_df['output'] = t_df.progress_apply(classify_comment_tw, axis=1)
    return t_df
t_df = process_dataframe_tw(t_df)

t_df.to_csv(data_path+"output_tw_0shot-llama3-4bit.csv", index=False)

true_labels = list(t_df['Label'])
predicted_labels = list(t_df['output'].apply(map_output))

accuracy = accuracy_score(true_labels, predicted_labels)
precision = precision_score(true_labels, predicted_labels)
recall = recall_score(true_labels, predicted_labels)
f1 = f1_score(true_labels, predicted_labels)

print(f"Accuracy: {accuracy:.4f}")
print(f"Precision: {precision:.4f}")
print(f"Recall: {recall:.4f}")
print(f"F1 Score: {f1:.4f}")

"""Result analysis"""

result_df_yt = pd.read_csv(data_path+"output_yt_0shot-llama3-4bit.csv")
result_df_tw = pd.read_csv(data_path+"output_tw_0shot-llama3-4bit.csv")

def map_output(output):
    if 'not' in output:
        return 0
    else:
        return 1
predicted_labels_yt = list(result_df_yt['output'].apply(map_output))
predicted_labels_tw = list(result_df_tw['output'].apply(map_output))
actual_labels_yt = list(result_df_yt['Label'])
actual_labels_tw = list(result_df_tw['Label'])

from sklearn.metrics import precision_score, recall_score, f1_score

def calculate_classwise_metrics(actual_labels, predicted_labels, class_name):
    precision = precision_score(actual_labels, predicted_labels, pos_label=class_name)
    recall = recall_score(actual_labels, predicted_labels, pos_label=class_name)
    f1 = f1_score(actual_labels, predicted_labels, pos_label=class_name)
    return precision, recall, f1

print("YouTube Dataset:")
classes = [0, 1]
for cls in classes:
    cl = "W" if cls else "NW"
    precision, recall, f1 = calculate_classwise_metrics(actual_labels_yt, predicted_labels_yt, class_name=cls)
    print(f"Class {cl} - Precision: {precision:.2f}, Recall: {recall:.2f}, F1 Score: {f1:.2f}")

print("\nTwitter Dataset:")
for cls in classes:
    cl = "W" if cls else "NW"
    precision, recall, f1 = calculate_classwise_metrics(actual_labels_tw, predicted_labels_tw, class_name=cls)
    print(f"Class {cl} - Precision: {precision:.2f}, Recall: {recall:.2f}, F1 Score: {f1:.2f}")

