# -*- coding: utf-8 -*-
"""AP-test3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17SZGDb2d_IPKPnD4ylfkbnXG7-eBETyv
"""

!pip install promptbench

import pandas as pd
import promptbench as pb
from promptbench.dataload.dataset import Dataset
import os

print(pb.SUPPORTED_MODELS)

key = ''

model = pb.LLMModel(model='gpt-4o',
                    openai_key = key,
                    max_new_tokens=100)

"""4o-mini not supported"""

df = pd.read_csv('/content/annotations_1645.csv')

df['question'] = df.apply(
    lambda row: f"This comment is from a YouTube video titled {row['Title']}. the video is on {row['Topic']} topic. Output just 0 or 1, 1 if the comment is an example of whataboutism being practised, 0 otherwise. Comment: {row['Comments']}",
    axis=1
)

df = df[['question', 'Label']]
df = df.rename(columns={'Label': 'label'})

df = df.rename(columns={'question': 'content'})

yt_dataset = Dataset.from_pandas(df)

yt_dataset.to_csv('yt_dataset.csv',index=False)

class CustomCSV(Dataset):
    """
    CustomCSV is a dataset class for loading a custom CSV dataset containing `Comments` and `Label` columns.
    """
    def __init__(self, filepath):
        super().__init__("custom_csv")
        self.filepath = filepath

        # Load CSV and process data
        if os.path.exists(self.filepath):
            data = pd.read_csv(self.filepath)
            self.data = [{"content": row["content"], "label": row["label"]} for _, row in data.iterrows()]
        else:
            raise FileNotFoundError(f"{self.filepath} not found. Please provide the correct path.")

    def extract_answer(self, output):
        # Customize if need specific post-processing on model output
        return output.strip()

dataset = CustomCSV('yt_dataset.csv')

method = pb.PEMethod(method='ZSCoT',
                    dataset=dataset,
                    verbose=True,  # if True, print the detailed prompt and response
                        )

results = method.test(dataset,
                      model,
                      num_samples=5
                      )

"""After library modifications"""

!pip install /content/promptbench-0.0.4.4-py3-none-any.whl

!pip show promptbench

import promptbench as pb

print(pb.SUPPORTED_DATASETS)

dataset_name = "wht"
dataset = pb.DatasetLoader.load_dataset(dataset_name, filepath = "/content/annotations_1645.csv")

dataset.data[2]

model = pb.LLMModel(model='gpt-4o', max_new_tokens=500)

import os
os.environ['OPENAI_API_KEY'] = ''

"""Cot"""

method = pb.PEMethod(method='CoT',
                    dataset="wht",
                    verbose=True,
                        )

results = method.test(dataset,
                      model,
                      num_samples=5
                      )

results

"""ZCot"""

method = pb.PEMethod(method='ZSCoT',
                    dataset="wht",
                    verbose=True,
                        )

results = method.test(dataset,
                      model,
                      num_samples=5
                      )

results

"""expert_prompting"""

method = pb.PEMethod(method='expert_prompting',
                        dataset=dataset_name,
                        verbose=True
                        )

results = method.test(dataset,
                      model,
                      num_samples=5
                      )

results

"""baseline"""

method = pb.PEMethod(method='baseline',
                        dataset=dataset_name,
                        verbose=True
                        )

results = method.test(dataset,
                      model,
                      num_samples=5
                      )

results

"""emotion_prompt"""

method = pb.PEMethod(method='emotion_prompt',
                        dataset=dataset_name,
                        verbose=True,
                        prompt_id = 5
                        )

results = method.test(dataset,
                      model,
                      num_samples=5
                      )

results

"""least to most"""

method = pb.PEMethod(method='least_to_most',
                        dataset=dataset_name,
                        verbose=True
                        )

results = method.test(dataset,
                      model,
                      num_samples=5
                      )

results

